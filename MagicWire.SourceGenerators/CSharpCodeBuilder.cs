using System.Collections.Generic;
using System.Linq;
using System.Text;
using MagicWire.SourceGenerators.Models;

namespace MagicWire.SourceGenerators;

internal static class CSharpCodeBuilder
{
    internal static string Build(WireableObject obj)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated/>");
        builder.AppendLine("#pragma warning disable CS8618");
        builder.AppendLine("#pragma warning disable CS8603");
        builder.AppendLine($"using MagicWire;");
        builder.AppendLine($"using System;");
        builder.AppendLine($"using System.Collections.Generic;");
        builder.AppendLine($"using System.Text.Json.Nodes;");
        builder.AppendLine($"namespace {obj.Namespace};");
        builder.AppendLine($"public partial class {obj.ClassName} : WireableObject");
        builder.AppendLine("{");

        foreach (var property in obj.Fields)
        {
            builder.AppendLine();
            builder.AppendLine($"    public {property.Type} {property.PropertyName} {{");
            builder.AppendLine($"        get => {property.FieldName};");
            builder.AppendLine($"        set");
            builder.AppendLine($"        {{");
            builder.AppendLine($"            {property.FieldName} = value;");
            builder.AppendLine($"            WireContainer.Instance.EmitObjectPropertyChange(this, \"{property.PropertyName}\", value);");
            builder.AppendLine($"        }}");
            builder.AppendLine($"    }}");
        }

        foreach (var @event in obj.Events)
        {
            builder.AppendLine();
            builder.AppendLine($"    public partial void {@event.MethodName}({string.Join(", ", @event.Parameters.Select(p => $"{p.Item2} {p.Item1}"))})");
            builder.AppendLine($"    {{");
            builder.AppendLine($"        WireContainer.Instance.EmitEvent(this, \"{@event.EventName}\"{(@event.Parameters.Count > 0 ? ", " : "")}{string.Join(", ", @event.Parameters.Select(p => p.Item1))});");
            builder.AppendLine($"    }}");
        }

        builder.AppendLine();
        builder.AppendLine("    protected override MagicObject w__InitializeWireMagic()");
        builder.AppendLine("    {");
        builder.AppendLine($"        var obj = new MagicObject(\"{obj.ClassName}\");");
        builder.AppendLine($"        obj.SetStateDelegate(() => {{");
        builder.AppendLine($"            var state = new JsonObject();");
        foreach (var property in obj.Fields)
        {
            builder.AppendLine($"            state[\"{property.PropertyName}\"] = {property.FieldName};");
        }
        builder.AppendLine($"            return state;");
        builder.AppendLine($"        }});");

        foreach (var operation in obj.Operations)
        {
            builder.AppendLine($"        obj.SetMethod(\"{operation.MethodName}\", async (frontend, args) => {{");
            var i = 0;
            var argNameList = new List<string>();
            foreach (var param in operation.Parameters)
            {
                if (param.Item2 == "MagicWire.IFrontend")
                {
                    argNameList.Add(param.Item1);
                }
                else
                {
                    builder.AppendLine($"            var a{i} = args[{i}].GetValue<{param.Item2}>();");
                    argNameList.Add($"a{i}");
                    i++;
                }
            }
            
            var argNames = string.Join(", ", argNameList);
            if (operation.ReturnType is "void" or "Task")
            {
                builder.AppendLine($"            {(operation.ReturnType == "Task" ? "await " : "")}{operation.MethodName}({argNames});");
                builder.AppendLine($"            return null;");
            }
            else
            {
                builder.AppendLine($"            return {(operation.ReturnType.StartsWith("Task<") ? "await " : "")} {operation.MethodName}({argNames});");
            }

            builder.AppendLine($"        }});");
        }
        
        builder.AppendLine($"        return obj;");
        builder.AppendLine($"    }}");
        builder.AppendLine($"}}");
        return builder.ToString();
    }
}